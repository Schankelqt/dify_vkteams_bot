import os
import json
import logging
import requests

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logger = logging.getLogger("pyrus")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

# ---------- .env –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

# ---------- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env ----------
PROXY_API_URL = os.getenv("PYRUS_UPLOAD_PROXY_URL", "https://aimatrix-e8zs.onrender.com/upload_files_pyrus").strip()
TARGET_TASK_ID = int(os.getenv("PYRUS_TARGET_TASK_ID", "0"))

# ---------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ----------
def upload_json_to_task(json_data: dict, report_date: str):
    if not TARGET_TASK_ID:
        raise RuntimeError("[Pyrus] ‚ùå PYRUS_TARGET_TASK_ID –Ω–µ –∑–∞–¥–∞–Ω")
    if not PROXY_API_URL:
        raise RuntimeError("[Pyrus] ‚ùå PYRUS_UPLOAD_PROXY_URL –Ω–µ –∑–∞–¥–∞–Ω")

    filename = f"daily_report_{report_date}.json"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(json_data, f, ensure_ascii=False, indent=2)
    logger.info(f"[Pyrus] üìé –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {filename}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    payload = {
        "filename": filename,
        "task_id": TARGET_TASK_ID,
        "body": json_data
    }

    logger.info(f"[Pyrus] üåê –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ API: {PROXY_API_URL}")
    try:
        resp = requests.post(PROXY_API_URL, json=payload, timeout=30)
        resp.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"[Pyrus] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ API: {e}, body={getattr(e.response, 'text', '')}")
        raise RuntimeError("[Pyrus] Upload via proxy failed")

    logger.info(f"[Pyrus] ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API. –°—Ç–∞—Ç—É—Å: {resp.status_code}")