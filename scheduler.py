# scheduler.py

import os
import json
import schedule
import time
from datetime import datetime
import pytz
from dotenv import load_dotenv
import asyncio

from vk_teams_async_bot.bot import Bot
from users import USERS, TEAMS

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
VK_TEAMS_TOKEN = os.getenv("VK_TEAMS_TOKEN")
VK_TEAMS_API_BASE = os.getenv("VK_TEAMS_API_BASE")

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
MSK = pytz.timezone("Europe/Moscow")

QUESTION_SETS = {
    "daily_start": [
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞:\n"
        "–ß—Ç–æ –¥–µ–ª–∞–ª –≤ –ø—è—Ç–Ω–∏—Ü—É?",
        "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?",
        "–ï—Å—Ç—å –ª–∏ –±–ª–æ–∫–µ—Ä—ã?"
    ],
    "daily_regular": [
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞:\n"
        "–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª –≤—á–µ—Ä–∞?",
        "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?",
        "–ï—Å—Ç—å –ª–∏ –±–ª–æ–∫–µ—Ä—ã?"
    ],
    "weekly": [
        "–ü—Ä–∏–≤–µ—Ç! ‚òÄÔ∏è\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞:\n"
        "–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?",
        "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–µ–ª–∞—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π?",
        "–ï—Å—Ç—å –ª–∏ –±–ª–æ–∫–µ—Ä—ã?"
    ]
}

def load_answers() -> dict:
    try:
        with open("answers.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_answers(data: dict):
    with open("answers.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def clean_team_answers(today_str: str, team_id: int):
    """
    –ß–∏—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –ø–æ members –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è.
    –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ç—Ä–æ–≥–∞–µ–º.
    """
    answers = load_answers()
    team = TEAMS.get(team_id, {})
    members = set(team.get("members", {}).keys())

    updated = {}
    for uid, info in answers.items():
        if uid in members:
            if info.get("date") == today_str:
                updated[uid] = info
        else:
            # –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –¥—Ä—É–≥–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã)
            updated[uid] = info

    save_answers(updated)

def build_text_report(team_id: int, date_str: str) -> str:
    answers = load_answers()
    team = TEAMS.get(team_id)
    report_lines = [f"üìù –û—Ç—á—ë—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ ¬´{team['team_name']}¬ª –∑–∞ {date_str}"]

    responded = 0
    total = len(team.get("members", {}))

    for user_id, full_name in team.get("members", {}).items():
        entry = answers.get(user_id)
        summary = entry.get("summary") if entry else "-"
        name = full_name.strip()
        report_lines.append(f"\nüë§ *{name}*\n{summary}")
        if entry:
            responded += 1

    report_lines.append(f"\nüìä –û—Ç—á–∏—Ç–∞–ª–∏—Å—å: {responded}/{total}")
    return "\n".join(report_lines)

async def send_long_text(bot: Bot, chat_id: str, text: str, chunk_size: int = 1000):
    chunks = []
    while text:
        part = text[:chunk_size]
        last_nl = part.rfind("\n")
        if last_nl > 0 and len(text) > chunk_size:
            part = text[:last_nl]
        chunks.append(part.strip())
        text = text[len(part):].lstrip()

    for i, part in enumerate(chunks):
        header = f"–ß–∞—Å—Ç—å {i+1}/{len(chunks)}:\n" if len(chunks) > 1 else ""
        try:
            await bot.send_text(chat_id=chat_id, text=header + part)
            await asyncio.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i+1} ‚Üí {chat_id}: {e}")

async def send_questions(team_id: int, question_key: str):
    team = TEAMS.get(team_id)
    if not team:
        return
    questions = QUESTION_SETS.get(question_key)
    if not questions:
        return
    message = "\n".join(questions)
    print(f"üì® –ö–æ–º–∞–Ω–¥–∞ {team_id}: —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã ({question_key})...")
    bot = Bot(bot_token=VK_TEAMS_TOKEN, url=VK_TEAMS_API_BASE)
    for user_id in team.get("members", {}):
        try:
            await send_long_text(bot, chat_id=user_id, text=message)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ‚Üí {user_id}: {e}")

async def send_report(team_id: int, date_str: str):
    report_text = build_text_report(team_id, date_str)
    bot = Bot(bot_token=VK_TEAMS_TOKEN, url=VK_TEAMS_API_BASE)
    for manager_id in TEAMS[team_id].get("managers", []):
        try:
            await send_long_text(bot, chat_id=manager_id, text=report_text)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ ‚Üí {manager_id}: {e}")

    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ —á–∏—Å—Ç–∏–º –æ—Ç–≤–µ—Ç—ã —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
    clean_team_answers(date_str, team_id)

def job_send_questions(team_id: int, key: str):
    asyncio.run(send_questions(team_id, key))

def job_send_report(team_id: int):
    today = datetime.now(MSK).strftime("%Y-%m-%d")
    asyncio.run(send_report(team_id, today))

# --- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ---
# –ö–æ–º–∞–Ω–¥–∞ 1 (Daily)
schedule.every().monday.at("09:00").do(job_send_questions, team_id=1, key="daily_start")
schedule.every().tuesday.at("09:00").do(job_send_questions, team_id=1, key="daily_regular")
schedule.every().wednesday.at("09:00").do(job_send_questions, team_id=1, key="daily_regular")
schedule.every().thursday.at("09:00").do(job_send_questions, team_id=1, key="daily_regular")

schedule.every().monday.at("09:30").do(job_send_report, team_id=1)
schedule.every().tuesday.at("09:30").do(job_send_report, team_id=1)
schedule.every().wednesday.at("09:30").do(job_send_report, team_id=1)
schedule.every().thursday.at("09:30").do(job_send_report, team_id=1)

# –ö–æ–º–∞–Ω–¥–∞ 2 (Daily)
schedule.every().monday.at("09:00").do(job_send_questions, team_id=2, key="daily_start")
schedule.every().wednesday.at("09:00").do(job_send_questions, team_id=2, key="daily_regular")
schedule.every().friday.at("11:00").do(job_send_questions, team_id=2, key="daily_regular")

schedule.every().monday.at("11:00").do(job_send_report, team_id=2)
schedule.every().wednesday.at("11:00").do(job_send_report, team_id=2)
schedule.every().friday.at("11:00").do(job_send_report, team_id=2)

# –ö–æ–º–∞–Ω–¥–∞ 3 (Weekly)
schedule.every().wednesday.at("15:00").do(job_send_questions, team_id=3, key="weekly")
schedule.every().wednesday.at("22:00").do(job_send_report, team_id=3)

print("üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...")
while True:
    schedule.run_pending()
    time.sleep(30)